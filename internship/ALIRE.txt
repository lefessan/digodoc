
Ne pas hésiter à poser des questions sur Zulip, en particulier dans le
canal "projet docs" pour Digodoc et dans le canal "opam" pour OPAM

0. On va travailler dans $HOME/DIGODOC:

    mkdir $HOME/DIGODOC
    cd $HOME/DIGODOC
    git clone git@github.com:ocamlpro/digodoc
    cd digodoc
    git remote add lefessan git@github.com:lefessan/digodoc
    git fetch -a lefessan
    git checkout z-2021-02-29-documentation

    (vérifier qu'il y a bien un répertoire internship/ )

1. Installer un switch opam maximal avec keep-dir

  1.1 Compiler et installer la dernière version d'opam

  Pour la suite, possibilité d'utiliser un OPAMROOT pour travailler sur un
  opam dans un répertoire de travail plutot que sur le opam global.
  (par exemple, OPAMROOT=$HOME/DIGODOC/opam, mais attention, il faut que
   cette variable soit utilisée tout le temps, ce qui est compliqué...)

  1.2 Utiliser une copie locale du repository OPAM pour la suite (pour
    éviter les problèmes de mise à jour):

    cd $HOME/DIGODOC
    git clone git@github.com:ocaml/opam-repository
    cd opam-repository
    opam remote set-url --set-default default file://$(pwd)
    opam remote

  1.3 Un certain nombre de paquets peuvent poser problème quand on compile
    un switch maximal avec ocaml 4.10.0, il faut les supprimer du
    opam-repository local:

    rm -rf packages/ocaml-secondary-compiler
    rm -rf packages/ocamlfind-secondary

   Faire `opam update` pour que opam recharge la nouvelle description

 1.6 Créer le switch de travail :
 
   opam switch create 4.10.0-docs 4.10.0

   Puis installer qques packages

   opam install lwt alt-ergo odoc odig

 1.7 On compile digodoc:

   cd $HOME/DIGODOC/digodoc

   ( on va utiliser le switch 4.11.0-docs localement, plus pratique: )
   opam switch link 4.11.0-docs

   ( on installe les dépendances: )
   make build-deps

   ( on construit )
   make

1.7 On lance digodoc:

   ( il faut que la variable OPAM_SWITCH_PREFIX soit définie: )
   eval $(opam env) 

   ./digodoc
   ./digodoc --cached
   ./digodoc --cached --html   

   La documentation générée est dans `_digodoc/html/`


